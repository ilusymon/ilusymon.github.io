<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Tem</title>
    <url>/2020/12/01/Tem/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/12/02/git/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>linux汉化man命令</title>
    <url>/2020/12/01/linux%E6%B1%89%E5%8C%96man%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1.下载源码"></a>1.下载源码</h2><p>源码网址 <a href="https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/">https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/</a></p>
<p>下载源码 wget <a href="https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/v1.5.2.tar.gz/1bbdc4f32272df0b95146518b27bf4be/v1.5.2.tar.gz">https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/v1.5.2.tar.gz/1bbdc4f32272df0b95146518b27bf4be/v1.5.2.tar.gz</a></p>
<p>[root@localhost opt]# wget  <a href="https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/manpages-zh-1.5.1.tar.gz/13275fd039de8788b15151c896150bc4/manpages-zh-1.5.1.tar.gz">https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/manpages-zh-1.5.1.tar.gz/13275fd039de8788b15151c896150bc4/manpages-zh-1.5.1.tar.gz</a></p>
<a id="more"></a>

<h2 id="2-解压并安装"><a href="#2-解压并安装" class="headerlink" title="2.解压并安装"></a>2.解压并安装</h2><p>[root@localhost opt]# tar xf manpages-zh-1.5.1.tar.gz</p>
<p>[root@localhost opt]# cd manpages-zh-1.5.2/</p>
<p>[root@localhost manpages-zh-1.5.1]# ./configure –disable-zhtw  –prefix=/usr/local/zhman</p>
<p>[root@localhost manpages-zh-1.5.1]# make &amp;&amp; make install</p>
<h2 id="3、为了不抵消man，我们新建cman命令作为中文查询"><a href="#3、为了不抵消man，我们新建cman命令作为中文查询" class="headerlink" title="3、为了不抵消man，我们新建cman命令作为中文查询"></a>3、为了不抵消man，我们新建cman命令作为中文查询</h2><p>[root@localhost man1]# cd ~</p>
<p>[root@localhost ~]# echo “alias cman=’man -M /usr/local/zhman/share/man/zh_CN’ “ &gt;&gt;.bash_profile<br>[root@localhost ~]# source .bash_profile</p>
<h2 id="4-使用中文man查询命令"><a href="#4-使用中文man查询命令" class="headerlink" title="4.使用中文man查询命令"></a>4.使用中文man查询命令</h2><p>[root@localhost ~]# cman ls</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Ajax与Json</title>
    <url>/2020/11/30/Ajax%E4%B8%8EJson/</url>
    <content><![CDATA[<h2 id="第1章-AJAX简介"><a href="#第1章-AJAX简介" class="headerlink" title="第1章 AJAX简介"></a>第1章 AJAX简介</h2><a id="more"></a>

<h3 id="1-1-什么是AJAX"><a href="#1-1-什么是AJAX" class="headerlink" title="1.1 什么是AJAX?"></a>1.1 什么是AJAX?</h3><ul>
<li><p>AJAX即“<strong>A</strong>synchronous  <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。异步  同步(请求和响应都是同步的)</p>
</li>
<li><p>AJAX的实际意义是，不发生页面跳转、异步请求载入内容并改写局部页面内容的技术。局部刷新(js完成)</p>
</li>
<li><p>AJAX也可以简单的理解为通过JS向服务器发送请求。</p>
<ul>
<li>(location.href=””:是js给浏览器设置路径，请求时浏览器发出的，响应也是响应给浏览器)</li>
<li>JS往服务器发送请求：是js这个语言去访问服务器，如果服务器给响应，响应给js</li>
</ul>
</li>
<li><p>AJAX这门技术很早就被发明，但是直到2005年被谷歌的大量使用，才在市场中流行起来，可以说Google为AJAX的推广起到到推波助澜的作用。</p>
</li>
<li><p>同步处理与异步处理</p>
<ul>
<li><p>同步处理：</p>
<ul>
<li><p>AJAX出现之前，我们访问互联网时一般都是同步请求，也就是当我们通过一个页面向服务器发送一个请求时，在服务器响应结束之前，我们的整个页面是不能操作的，也就是直观上来看他是卡主不动的。</p>
</li>
<li><p>这就带来了非常糟糕的用户体验。首先，同步请求时，用户只能等待服务器的响应，而不能做任何操作。其次，如果请求时间过长可能会给用户一个卡死的感觉。最后，同步请求的最大缺点就是即使整个页面中只有一小部分内容发生改变我们也要刷新整个页面。</p>
</li>
</ul>
</li>
<li><p>异步处理：</p>
<ul>
<li><p>而异步处理指的是我们在浏览网页的同时，通过AJAX向服务器发送请求，发送请求的过程中我们浏览网页的行为并不会收到任何影响，甚至主观上感知不到在向服务器发送请求。当服务器正常响应请求后，响应信息会直接发送到AJAX中，AJAX可以根据服务器响应的内容做一些操作。</p>
</li>
<li><p>使用AJAX的异步请求基本上完美的解决了同步请求带来的问题。首先，发送请求时不会影响到用户的正常访问。其次，即使请求时间过长，用户不会有任何感知。最后，AJAX可以根据服务器的响应信息局部的修改页面，而不需要整个页面刷新。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-AJAX的常用API"><a href="#1-2-AJAX的常用API" class="headerlink" title="1.2 AJAX的常用API"></a>1.2 AJAX的常用API</h3><h4 id="1-2-1-请求对象"><a href="#1-2-1-请求对象" class="headerlink" title="1.2.1 请求对象"></a>1.2.1 请求对象</h4><ul>
<li><p>向服务器发送请求，毫无疑问需要使用Http协议，也就是我们需要通过JS来向服务器发送一个请求报文。这里我们来回顾一下请求报文的格式：</p>
<ul>
<li>请求首行</li>
<li>请求头</li>
<li>空行</li>
<li>请求体</li>
</ul>
</li>
<li><p>这是一个请求报文的格式，那我们如果手动的创建这么一个报文格式来发送给服务器想必是非常麻烦呢，于是浏览器为我们提供了一个XMLHttpRequest对象。</p>
</li>
</ul>
<h4 id="1-2-2-XMLHttpRequest-JavaScript完成异步请求需要用到的-jQuery如何去完成异步"><a href="#1-2-2-XMLHttpRequest-JavaScript完成异步请求需要用到的-jQuery如何去完成异步" class="headerlink" title="1.2.2 XMLHttpRequest   JavaScript完成异步请求需要用到的    jQuery如何去完成异步"></a>1.2.2 XMLHttpRequest   JavaScript完成异步请求需要用到的    jQuery如何去完成异步</h4><ul>
<li><p>XMLHttpRequest对象是AJAX中非常重要的对象，所有的AJAX操作都是基于该对象的。</p>
</li>
<li><p>XMLHttpRequest对象用来封装请求报文，我们向服务器发送的请求信息全部都需要封装到该对象中。</p>
</li>
<li><p>这里需要稍微注意一下，XMLHttpRequest对象并没有成为标准，但是现在的主流浏览器都支持该对象，而一些如IE6的老版本浏览器中的创建方式有一些区别，但是问题不大。</p>
</li>
<li><p>获取XMLHttpRequest对象：由于浏览器之间的差异，不同浏览器中获取XMLHttpRequest的方式不同，但总的来说一共有三种方式：</p>
<ul>
<li>方式一：var xhr = new XMLHttpRequest()：目前主流浏览器都支持</li>
<li>方式二：var xhr = new ActiveXObject(“Msxml2.XMLHTTP”)：IE6支持的方式</li>
<li>方式三：var xhr = new ActiveXObject(“Microsoft.XMLHTTP”)：IE5.5以下支持的方式</li>
</ul>
</li>
<li><p>根据三种不同的方式编写通用方法来获取XMLHttpRequest对象：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取XMLHttpRequest的通用方法</span></span><br><span class="line"><span class="function">function <span class="title">getXMLHttpRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> xhr;</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="comment">//大部分浏览器都支持</span></span><br><span class="line">		xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">	&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">//如果不支持，在这里捕获异常并且采用IE6支持的方式</span></span><br><span class="line">			xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Msxml2.XMLHTTP&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">			<span class="comment">//如果还不支持，在这里捕获异常并采用IE5支持的方式</span></span><br><span class="line">			xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>XMLHttpRequest对象的方法：</strong></p>
<ul>
<li><p>**open(method,url,async)**：用于设置请求的基本信息，接收三个参数。</p>
<ul>
<li><p>参数一：method</p>
<p>接收一个字符串，表明请求的方法：get或post</p>
</li>
<li><p>参数二：url</p>
<p>请求的地址，接收一个字符串</p>
</li>
<li><p>参数三：Assync</p>
<p>发送的请求是否为异步请求，接收一个布尔值。① true 是异步请求 ② false 不是异步请求（同步请求）</p>
</li>
</ul>
</li>
<li><p><strong>send(string)：</strong>用于将请求发送给服务器，可以接收一个参数</p>
<ul>
<li><p>string参数</p>
<p>该参数只在发送post请求时需要。用于设置请求体</p>
</li>
</ul>
</li>
<li><p>**setRequestHeader(header,value)**：用于设置请求头</p>
<ul>
<li><p>参数一：header参数</p>
<p>字符串类型，要设置的请求头的名字</p>
</li>
<li><p>参数二：value参数</p>
<p>字符串类型，要设置的请求头的值</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>XMLHttpRequest对象的属性：</strong></p>
<ul>
<li><p>readyState</p>
<ul>
<li>描述XMLHttpRequest的状态</li>
<li>一共有五种状态分别对应了五个数字：<ul>
<li>0 ：请求尚未初始化，open()尚未被调用</li>
<li>1 ：服务器连接已建立，send()尚未被调用</li>
<li>2 ：请求已接收，服务器尚未响应</li>
<li>3 ：请求已处理，正在接收服务器发送的响应</li>
<li>4 ：请求已处理完毕，且响应已就绪。</li>
</ul>
</li>
</ul>
</li>
<li><p>status</p>
<ul>
<li><p>请求的响应码</p>
<ul>
<li><p>200 响应成功</p>
</li>
<li><p>404 页面为找到</p>
</li>
<li><p>500 服务器内部错误 </p>
<p>… … … …</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>onreadystatechange</p>
<ul>
<li>该属性需要指向一个函数</li>
<li>该函数会在readyState属性发生改变时被调用</li>
</ul>
</li>
<li><p>responseText</p>
<ul>
<li>获得字符串形式的响应数据。</li>
</ul>
</li>
<li><p>responseXML（用的比较少）</p>
<ul>
<li>获得 XML 形式的响应数据。</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<p>使用AJAX发送GET请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取xhr对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = getXMLHttpRequest();</span><br><span class="line"><span class="comment">//设置请求信息</span></span><br><span class="line">xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;AjaxServlet?&amp;t=&quot;</span>+<span class="built_in">Math</span>.random(),<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">//监听请求状态</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//当响应完成</span></span><br><span class="line">	<span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="comment">//且状态码为200时</span></span><br><span class="line">		<span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">			<span class="comment">//接收响应信息（文本形式）</span></span><br><span class="line">			<span class="keyword">var</span> text = xhr.responseText;</span><br><span class="line">			<span class="comment">//弹出消息</span></span><br><span class="line">	      alert(text);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一个最简单的AJAX代码，向AjaxServlet发送了一个get请求，并且在页面中输出响应的内容。</p>
</blockquote>
<p>使用AJAX发送POST请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取xhr对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = getXMLHttpRequest();</span><br><span class="line"><span class="comment">//设置请求信息</span></span><br><span class="line">xhr.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;2.jsp&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//设置请求头</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.send(<span class="string">&quot;hello=123456&quot;</span>);</span><br><span class="line"><span class="comment">//监听请求状态</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//当响应完成</span></span><br><span class="line"><span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">	<span class="comment">//且状态码为200时</span></span><br><span class="line">	<span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">		<span class="comment">//接收响应信息（文本形式）</span></span><br><span class="line">		<span class="keyword">var</span> text = xhr.responseText;</span><br><span class="line">		<span class="comment">//弹出消息</span></span><br><span class="line">		alert(text);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="第2章-javaScript原生Ajax请求"><a href="#第2章-javaScript原生Ajax请求" class="headerlink" title="第2章 javaScript原生Ajax请求"></a>第2章 javaScript原生Ajax请求</h2><ul>
<li>原生的Ajax请求，包括如下的步骤：</li>
</ul>
<ol>
<li><p>我们首先要创建XMLHttpRequest 对象</p>
</li>
<li><p>调用open方法设置请求参数</p>
</li>
<li><p>调用send方法发送请求</p>
</li>
<li><p>在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</p>
</li>
</ol>
<ul>
<li><p>具体操作：</p>
<p><strong>创建一个html页面，发起请求。代码如下：</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">ajaxRequest</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 				1、我们首先要创建XMLHttpRequest </span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 				2、调用open方法设置请求参数</span></span></span><br><span class="line"><span class="javascript">				xhr.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;ajaxServlet?action=javaScriptAjax&amp;a=&quot;</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 				4、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span></span></span><br><span class="line"><span class="javascript">				xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//回调函数:接收服务器的响应的</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// 判断请求完成，并且成功</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">document</span>.getElementById(<span class="string">&quot;div01&quot;</span>).innerHTML = xhr.responseText;</span></span><br><span class="line">					&#125; </span><br><span class="line">				&#125;</span><br><span class="line"><span class="javascript"><span class="comment">// 				3、调用send方法发送请求</span></span></span><br><span class="line">				xhr.send();</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;ajaxRequest()&quot;</span>&gt;</span>ajax request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div01&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>创建一个AjaxServlet程序接收请求</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.gson.GsonTest;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">javaScriptAjax</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;ajax请求过来了 a--&quot;</span> + request.getParameter(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">		Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">		<span class="comment">// 使用随机数，可以让客户端看到变化</span></span><br><span class="line">		response.getWriter().write(</span><br><span class="line">				<span class="keyword">new</span> Gson().toJson(<span class="keyword">new</span> GsonTest.Person(random.nextInt(<span class="number">100</span>), <span class="string">&quot;12312&quot;</span>)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>在web.xml文件中的配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AjaxServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.AjaxServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AjaxServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ajaxServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>测试效果</strong></p>
<p><img src="D:\atguigu\1\JavaWeb\尚硅谷_陈鑫_Ajax与JSON.assets\1558933706621.png" alt="1558933706621"></p>
<p>通过上面的代码我们发现。编写原生的JavaScript我们自己要写很多的代码。而且还要考虑浏览器兼容问题。所以使用起来非常的不方便。那我们工作之后。怎么处理Ajax请求呢。我们一般会使用JavaScript的框架来解决这个问题，比如说我们前面学到的Jquery框架。它就有很好的Ajax解决方案。</p>
<h2 id="第3章-JQuery的Ajax请求"><a href="#第3章-JQuery的Ajax请求" class="headerlink" title="第3章 JQuery的Ajax请求"></a>第3章 JQuery的Ajax请求</h2><ul>
<li><p><strong>四个Ajax请求方法</strong></p>
<ul>
<li>$.ajax方法</li>
<li>$.get方法</li>
<li>$.post方法</li>
<li>$.getJSON方法</li>
</ul>
</li>
<li><p><strong>一个表单序列化方法：</strong>serialize()表单序列化方法</p>
</li>
<li><p><strong>如何使用上面的五个方法：</strong>在JQuery中和Ajax请求有关的方法有四个</p>
</li>
</ul>
<p><strong>方法一： $.ajax请求参数</strong></p>
<p>​    <strong>url</strong>：                                  请求的地址</p>
<p>​    <strong>type :</strong>                             请求的方式             get或post</p>
<p>​    <strong>data :</strong>                             请求的参数             string或json</p>
<p>​    <strong>success:</strong>                        成功的回调函数</p>
<p>​    <strong>dataType:</strong>                     返回的数据类型      常用json或text </p>
<p> 下面的方法必须遵守参数的顺序</p>
<p><strong>方法二、三：$.get请求和$.post请求</strong></p>
<p>​    <strong>url</strong>:请求的URL地址</p>
<p>​    <strong>data</strong>:待发送 Key/value 参数。</p>
<p>​    <strong>callback</strong>:载入成功时回调函数。</p>
<p>​    <strong>type</strong>:返回内容格式，xml, html, script, json, text。</p>
<p><strong>方法四：Jquery的$.getJSON</strong></p>
<p>​    <strong>url</strong>:待载入页面的URL地址</p>
<p>​    <strong>data</strong>:待发送 Key/value 参数。</p>
<p>​    <strong>callback</strong>:载入成功时回调函数。</p>
<ul>
<li><p>表单的序列化</p>
<ul>
<li>serialize() 方法可以把一个form表单中所有的表单项。都以字符串name=value&amp;name=value的形式进行拼接，省去我们很多不必要的工作。</li>
</ul>
</li>
<li><p>由于$.get、$.post和getJSON这三个方法的底层都是直接或者间接地使用$.ajax()方法来实现的异步请求的调用。所以我们以$.ajax()方法的使用为示例进行展示：</p>
</li>
</ul>
<p><strong>Jquery_Ajax_request.html的代码如下：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// ajax请求</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#ajaxBtn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">						url : <span class="string">&quot;ajaxServlet&quot;</span>, <span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="javascript">						error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// 请求失败回调</span></span></span><br><span class="line"><span class="javascript">							alert(<span class="string">&quot;请求失败&quot;</span>);</span></span><br><span class="line">						&#125;,</span><br><span class="line"><span class="javascript">						success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// 请求成功回调</span></span></span><br><span class="line">							alert( data );</span><br><span class="line">						&#125;,</span><br><span class="line"><span class="javascript">						type:<span class="string">&quot;POST&quot;</span>,				<span class="comment">// 请求的方式</span></span></span><br><span class="line"><span class="javascript">						dataType:<span class="string">&quot;json&quot;</span>,			<span class="comment">// 返回的数据类型为json对象</span></span></span><br><span class="line"><span class="javascript">						data:&#123;						<span class="comment">// 请求的参数</span></span></span><br><span class="line"><span class="javascript">							action:<span class="string">&quot;jqueryAjax&quot;</span>,</span></span><br><span class="line">							a:12,</span><br><span class="line"><span class="javascript">							date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">				<span class="comment">// ajax--get请求</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#getBtn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$.get(</span></span><br><span class="line"><span class="javascript">						<span class="string">&quot;ajaxServlet&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">							action:<span class="string">&quot;jqueryGet&quot;</span>,</span></span><br><span class="line">							a:12,</span><br><span class="line"><span class="javascript">							date:<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">						&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;alert(data);&#125;,<span class="string">&quot;json&quot;</span></span></span><br><span class="line">					);</span><br><span class="line">				&#125;);</span><br><span class="line">				</span><br><span class="line"><span class="javascript">				<span class="comment">// ajax--post请求</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#postBtn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// post请求</span></span></span><br><span class="line"><span class="javascript">					$.post(</span></span><br><span class="line"><span class="javascript">						<span class="string">&quot;ajaxServlet&quot;</span>, <span class="comment">// 请求路径</span></span></span><br><span class="line"><span class="javascript">						&#123;				<span class="comment">// 请求参数</span></span></span><br><span class="line"><span class="javascript">							action:<span class="string">&quot;jqueryPost&quot;</span>,</span></span><br><span class="line">							a:12,</span><br><span class="line"><span class="javascript">							date:<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">						&#125;,</span><br><span class="line"><span class="javascript">						<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; alert( data ) &#125;,  <span class="comment">// 成功的回调函数</span></span></span><br><span class="line"><span class="javascript">						<span class="string">&quot;text&quot;</span>							<span class="comment">// 返回的数据类型</span></span></span><br><span class="line">					);</span><br><span class="line">				&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">				<span class="comment">// ajax--getJson请求</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#getJsonBtn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 调用</span></span></span><br><span class="line"><span class="javascript">					$.getJSON(</span></span><br><span class="line"><span class="javascript">						<span class="string">&quot;ajaxServlet&quot;</span>, 		<span class="comment">// 请求路径</span></span></span><br><span class="line"><span class="javascript">						&#123;					<span class="comment">// 请求参数</span></span></span><br><span class="line"><span class="javascript">							action:<span class="string">&quot;jqueryGetJSON&quot;</span>,</span></span><br><span class="line">							a:12,</span><br><span class="line"><span class="javascript">							date:<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">						&#125;, </span><br><span class="line"><span class="javascript">						<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; alert( data ) &#125;  <span class="comment">// 成功的回调函数		</span></span></span><br><span class="line">					);</span><br><span class="line">				&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">				<span class="comment">// ajax请求</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#submit&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 把参数序列化</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> data = $(<span class="string">&quot;#form01&quot;</span>).serialize();</span></span><br><span class="line">					alert(data);</span><br><span class="line">				&#125;);</span><br><span class="line">				</span><br><span class="line">			&#125;);</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;ajaxBtn&quot;</span>&gt;</span>$.ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;getBtn&quot;</span>&gt;</span>$.get请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;postBtn&quot;</span>&gt;</span>$.post请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;getJsonBtn&quot;</span>&gt;</span>$.getJSON请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form01&quot;</span> &gt;</span></span><br><span class="line">			用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">			密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">			下拉单选：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;single&quot;</span>&gt;</span></span><br><span class="line">			  	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Single&quot;</span>&gt;</span>Single<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			  	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Single2&quot;</span>&gt;</span>Single2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		  	下拉多选：</span><br><span class="line">		  	<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">		    	<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Multiple&quot;</span>&gt;</span>Multiple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		    	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Multiple2&quot;</span>&gt;</span>Multiple2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		    	<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Multiple3&quot;</span>&gt;</span>Multiple3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		  	复选：</span><br><span class="line">		 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;check1&quot;</span>/&gt;</span> check1</span><br><span class="line">		 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;check2&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span> check2<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		 	单选：</span><br><span class="line">		 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;radio1&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span> radio1</span><br><span class="line">		 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;radio2&quot;</span>/&gt;</span> radio2<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span>			</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>AjaxServlet的代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.gson.GsonTest;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">javaScriptAjax</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;ajax请求过来了 a--&quot;</span> + request.getParameter(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">		Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">		<span class="comment">// 使用随机数，可以让客户端看到变化</span></span><br><span class="line">		response.getWriter().write(</span><br><span class="line">				<span class="keyword">new</span> Gson().toJson(<span class="keyword">new</span> GsonTest.Person(random.nextInt(<span class="number">100</span>), <span class="string">&quot;12312&quot;</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">jqueryAjax</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;jqueryAjax请求过来了 a--&quot;</span> + request.getParameter(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">		Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">		<span class="comment">// 使用随机数，可以让客户端看到变化</span></span><br><span class="line">		response.getWriter().write(</span><br><span class="line">				<span class="keyword">new</span> Gson().toJson(<span class="keyword">new</span> GsonTest.Person(random.nextInt(<span class="number">100</span>), <span class="string">&quot;12312&quot;</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">jqueryGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;jqueryGet请求过来了 a--&quot;</span> + request.getParameter(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">		Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">		<span class="comment">// 使用随机数，可以让客户端看到变化</span></span><br><span class="line">		response.getWriter().write(</span><br><span class="line">				<span class="keyword">new</span> Gson().toJson(<span class="keyword">new</span> GsonTest.Person(random.nextInt(<span class="number">100</span>), <span class="string">&quot;12312&quot;</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">jqueryPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;jqueryPost请求过来了 a--&quot;</span> + request.getParameter(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">		Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">		<span class="comment">// 使用随机数，可以让客户端看到变化</span></span><br><span class="line">		response.getWriter().write(</span><br><span class="line">				<span class="keyword">new</span> Gson().toJson(<span class="keyword">new</span> GsonTest.Person(random.nextInt(<span class="number">100</span>), <span class="string">&quot;12312&quot;</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">jqueryGetJSON</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;jqueryGetJSON请求过来了 a--&quot;</span> + request.getParameter(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">		Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">		<span class="comment">// 使用随机数，可以让客户端看到变化</span></span><br><span class="line">		response.getWriter().write(</span><br><span class="line">				<span class="keyword">new</span> Gson().toJson(<span class="keyword">new</span> GsonTest.Person(random.nextInt(<span class="number">100</span>), <span class="string">&quot;12312&quot;</span>)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第4章-JSON简介"><a href="#第4章-JSON简介" class="headerlink" title="第4章 JSON简介"></a>第4章 JSON简介</h2><ul>
<li>客户端（或浏览器）与服务器间交互时，服务器端可以返回一个字符串，但当我们需要返回一个复杂的数据时，比如说需要返回一个对象时，就需要定义一下数据的格式。</li>
<li>AJAX一开始使用的是XML的数据格式，XML的数据格式非常简单清晰，容易编写，但是由于XML中包含了过多的标签，以及十分复杂的结构，解析起来也相对复杂，所以目前来讲，AJAX中已经几乎不使用XML来发送数据了。取而代之的是一项新的技术JSON。</li>
<li>JSON是JavaScript Object Notation 的缩写，是JS提供的一种轻量级的数据交换格式， 易于人阅读和编写。同时也易于机器解析和生成。 它基于<a href="http://www.crockford.com/javascript">JavaScript Programming Language</a>, <a href="http://www.ecma-international.org/publications/files/ecma-st/ECMA-262.pdf">Standard ECMA-262 3rd Edition - December 1999</a>的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C，C++，C#，Java，JavaScript，Perl，Python等）。 这些特性使JSON成为理想的数据交换语言。</li>
<li>JSON对象本质上就是一个JS对象，但是这个对象比较特殊，它可以直接转换为字符串，在不同语言中进行传递，通过工具又可以转换为其他语言中的对象。</li>
</ul>
<h2 id="第5章-JSON的使用"><a href="#第5章-JSON的使用" class="headerlink" title="第5章 JSON的使用"></a>第5章 JSON的使用</h2><p>在标准的json格式中，json对象由在括号括起来，对象中的属性也就是json的key是一个字符串，所以一定要使用双引号引起来。每组key之间使用逗号进行分隔。</p>
<h3 id="5-1-JSON的定义"><a href="#5-1-JSON的定义" class="headerlink" title="5.1 JSON的定义"></a>5.1 JSON的定义</h3><ul>
<li><p>JSON通过6种数据类型来表示：</p>
<ul>
<li>字符串<ul>
<li>例子：”字符串”</li>
<li>注意：不能使用单引号</li>
</ul>
</li>
<li>数字：<ul>
<li>例子：123.4</li>
</ul>
</li>
<li>布尔值：<ul>
<li>例子：true、false</li>
</ul>
</li>
<li>null值:<ul>
<li>例子：null</li>
</ul>
</li>
<li>对象<ul>
<li>例子：{“name”:”sunwukong”, ”age”:18}</li>
</ul>
</li>
<li>数组<ul>
<li>例子：[1,”str”,true]</li>
</ul>
</li>
</ul>
</li>
<li><p>格式：</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">var 变量名 = &#123;</span><br><span class="line">	“key” : value , 		// Number类型</span><br><span class="line">	“key2” : “value” , 		// 字符串类型</span><br><span class="line">	“key3” : [] , 			// 数组类型</span><br><span class="line">	“key4” : &#123;&#125;, 			// json 对象类型</span><br><span class="line">	“key5” : [&#123;&#125;,&#123;&#125;] 		// json 数组   对象数组</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var jsons = &#123;</span><br><span class="line">	&quot;key1&quot;:&quot;abc&quot;, // 字符串类型</span><br><span class="line">	&quot;key2&quot;:1234,  // Number</span><br><span class="line">	&quot;key3&quot;:[1234,&quot;21341&quot;,&quot;53&quot;], // 数组</span><br><span class="line">	&quot;key4&quot;:&#123;                    // json类型</span><br><span class="line">			&quot;key4_1&quot; : 12,</span><br><span class="line">			&quot;key4_2&quot; : &quot;kkk&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">	&quot;key5&quot;:[&#123;                  // json数组</span><br><span class="line">			 &quot;key5_1_1&quot; : 12,</span><br><span class="line">			 &quot;key5_1_2&quot; : &quot;abc&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">			 <span class="attr">&quot;key5_2_1&quot;</span> : <span class="number">41</span>,</span><br><span class="line">			 <span class="attr">&quot;key5_2_2&quot;</span> : <span class="string">&quot;bbj&quot;</span></span><br><span class="line">			&#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jsons.key1</span><br><span class="line">jsons.key3[1]</span><br><span class="line">jsons.key4.key4_2</span><br><span class="line">jsons.key5[1].key5_2_1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-2-JSON对象的访问"><a href="#5-2-JSON对象的访问" class="headerlink" title="5.2 JSON对象的访问"></a>5.2 JSON对象的访问</h3><p>json对象，顾名思义，就知道它是一个对象。里面的key就是对象的属性。我们要访问一个对象的属性，只需要使用【对象名.属性名】的方式访问即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">			<span class="comment">// json的定义			</span></span><br><span class="line">			<span class="keyword">var</span> jsons = &#123;</span><br><span class="line">					<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;abc&quot;</span>, <span class="comment">// 字符串类型</span></span><br><span class="line">					<span class="string">&quot;key2&quot;</span>:<span class="number">1234</span>,  <span class="comment">// Number</span></span><br><span class="line">					<span class="string">&quot;key3&quot;</span>:[<span class="number">1234</span>,<span class="string">&quot;21341&quot;</span>,<span class="string">&quot;53&quot;</span>], <span class="comment">// 数组</span></span><br><span class="line">					<span class="string">&quot;key4&quot;</span>:&#123;                    <span class="comment">// json类型</span></span><br><span class="line">						<span class="string">&quot;key4_1&quot;</span> : <span class="number">12</span>,</span><br><span class="line">						<span class="string">&quot;key4_2&quot;</span> : <span class="string">&quot;kkk&quot;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="string">&quot;key5&quot;</span>:[&#123;                  <span class="comment">// json数组</span></span><br><span class="line">					    <span class="string">&quot;key5_1_1&quot;</span> : <span class="number">12</span>,</span><br><span class="line">					    <span class="string">&quot;key5_1_2&quot;</span> : <span class="string">&quot;abc&quot;</span></span><br><span class="line">					&#125;,&#123;</span><br><span class="line">					    <span class="string">&quot;key5_2_1&quot;</span> : <span class="number">41</span>,</span><br><span class="line">					    <span class="string">&quot;key5_2_2&quot;</span> : <span class="string">&quot;bbj&quot;</span></span><br><span class="line">					&#125;]</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="comment">// 访问json的属性</span></span><br><span class="line">			alert(jsons.key1); <span class="comment">// &quot;abc&quot;</span></span><br><span class="line">			<span class="comment">// 访问json的数组属性</span></span><br><span class="line">			alert(jsons.key3[<span class="number">1</span>]); <span class="comment">// &quot;21341&quot;</span></span><br><span class="line">			<span class="comment">// 访问json的json属性</span></span><br><span class="line">			alert(jsons.key4.key4_1);<span class="comment">//12</span></span><br><span class="line">			<span class="comment">// 访问json的json数组</span></span><br><span class="line">			alert(jsons.key5[<span class="number">0</span>].key5_1_2);<span class="comment">//&quot;abc&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-3-JSON中两个常用的方法"><a href="#5-3-JSON中两个常用的方法" class="headerlink" title="5.3 JSON中两个常用的方法"></a>5.3 JSON中两个常用的方法</h3><ul>
<li><p>JSON对象和字符串对象的互转：</p>
<ul>
<li>JSON.stringify( json )：此方法可以把一个json对象转换成为json字符串 </li>
<li>JSON.parse( jsonString )： 此方法可以把一个json字符串转换成为json对象</li>
</ul>
</li>
<li><p>代码示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">	<span class="comment">// 一个json对象</span></span><br><span class="line">	<span class="keyword">var</span> obj = &#123;</span><br><span class="line">		<span class="string">&quot;a&quot;</span> : <span class="number">12</span>,</span><br><span class="line">		<span class="string">&quot;c&quot;</span> : <span class="string">&quot;str&quot;</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 把json对象转换成为字符串对象</span></span><br><span class="line">	<span class="keyword">var</span> objStr = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	alert(objStr);</span><br><span class="line">	<span class="comment">// 把json对象的字符串，转换成为 json对象</span></span><br><span class="line">	<span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(objStr);</span><br><span class="line">	alert(jsonObj);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-4-JSON在Java中的使用"><a href="#5-4-JSON在Java中的使用" class="headerlink" title="5.4 JSON在Java中的使用"></a>5.4 JSON在Java中的使用</h3><ul>
<li><p>我们要使用json和java中使用，我们需要使用到一个第三方的包。目前主流的解析JSON的工具大概有三种json-lib、jackson、gson。三种解析工具相比较json-lib的使用复杂，且效率较差。而Jackson和gson解析效率较高。使用简单，这里我们以gson为例讲解。  J   g</p>
<ul>
<li><p>Gson是Google公司出品的解析JSON工具，使用简单，解析性能好。</p>
</li>
<li><p>Gson中解析JSON的核心是Gson的类，解析操作都是通过该类实例进行。</p>
</li>
</ul>
</li>
<li><p>Gson 提供的用来在 Java 对象和 JSON 数据之间进行映射的 Java 类库，可以将一个 JSON 字符串转成一个 Java 对象，或者反过来。</p>
</li>
<li><p><strong>json在java中的操作常见的有三种情况</strong></p>
<ul>
<li>java对象和json的转换</li>
<li>java对象list集合和json的转换</li>
<li>map对象和json的转换</li>
</ul>
</li>
<li><p>代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">		<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.age = age;</span><br><span class="line">			<span class="keyword">this</span>.name = name;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.age = age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> name;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.name = name;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;Person [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 要把复杂的json字符串转换成为java对象。需要继承TypeToken类。</span></span><br><span class="line">	<span class="comment">// 并把返回的类型当成TypeToken的泛型注入</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonType</span> <span class="keyword">extends</span> <span class="title">TypeToken</span>&lt;<span class="title">List</span>&lt;<span class="title">Person</span>&gt;&gt; </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// json操作，一定要先new一个gson对象。</span></span><br><span class="line">		Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">		<span class="comment">// java对象--json</span></span><br><span class="line">		Person person = <span class="keyword">new</span> Person(<span class="number">12</span>, <span class="string">&quot;wzg168&quot;</span>);</span><br><span class="line">		<span class="comment">// 把对象转成为json字符串</span></span><br><span class="line">		String personjson = gson.toJson(person);</span><br><span class="line"></span><br><span class="line">		System.out.println(personjson);</span><br><span class="line">		<span class="comment">// 把json字符串转换成为java对象</span></span><br><span class="line">		Person p = gson.fromJson(personjson, Person.class);</span><br><span class="line">		System.out.println(p);</span><br><span class="line">		System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">		<span class="comment">// 2、java对象list集合和json的转换</span></span><br><span class="line">		List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">			list.add(<span class="keyword">new</span> Person(<span class="number">10</span> * i, <span class="string">&quot;name-&quot;</span> + i));</span><br><span class="line">		&#125;</span><br><span class="line">		String jsonListString = gson.toJson(list);</span><br><span class="line">		System.out.println(jsonListString);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 把json数组转换成为List对象</span></span><br><span class="line">		<span class="comment">// List&lt;Person&gt; ps = gson.fromJson(jsonListString, new PersonType().getType());</span></span><br><span class="line">		<span class="comment">// 我们也可以使用匿名内部类</span></span><br><span class="line">		List&lt;Person&gt; ps = gson.fromJson(jsonListString, <span class="keyword">new</span> TypeToken&lt;List&lt;Person&gt;&gt;() &#123;</span><br><span class="line">		&#125;.getType());</span><br><span class="line">		System.out.println(ps);</span><br><span class="line">		System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 3、map对象和json的转换</span></span><br><span class="line">		Map&lt;String, Person&gt; mapPerson = <span class="keyword">new</span> HashMap&lt;String, GsonTest.Person&gt;();</span><br><span class="line">		<span class="comment">// 添加person到map中</span></span><br><span class="line">		mapPerson.put(<span class="string">&quot;p1&quot;</span>, <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;person-1&quot;</span>));</span><br><span class="line">		mapPerson.put(<span class="string">&quot;p2&quot;</span>, <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">&quot;person-2&quot;</span>));</span><br><span class="line">		<span class="comment">// 把map转换成为json对象</span></span><br><span class="line">		String jsonMapString = gson.toJson(mapPerson);</span><br><span class="line">		System.out.println(jsonMapString);</span><br><span class="line">		<span class="comment">// 通过使用匿名内部类的方式</span></span><br><span class="line">		Map&lt;String, Person&gt; map = gson.fromJson(jsonMapString,</span><br><span class="line">				<span class="keyword">new</span> TypeToken&lt;HashMap&lt;String, Person&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">		System.out.println(map);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Docker入门</title>
    <url>/2020/12/01/Docker%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<ul>
<li><p>掌握Docker基础知识，能够理解Docker镜像与容器的概念</p>
</li>
<li><p>完成Docker安装与启动</p>
</li>
<li><p>掌握Docker镜像与容器相关命令</p>
</li>
<li><p>掌握Tomcat Nginx 等软件的常用应用的安装</p>
</li>
<li><p>掌握docker迁移与备份相关命令</p>
</li>
<li><p>能够运用Dockerfile编写创建容器的脚本</p>
</li>
<li><p>能够搭建与使用docker私有仓库</p>
<a id="more"></a>



</li>
</ul>
<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-什么是虚拟化"><a href="#1-1-什么是虚拟化" class="headerlink" title="1.1 什么是虚拟化"></a>1.1 什么是虚拟化</h2><p>虚拟化，是指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445">应用程序</a>都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。</p>
<p> 虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p>
<h2 id="1-2-问题：为什么会有docker出现？"><a href="#1-2-问题：为什么会有docker出现？" class="headerlink" title="1.2 问题：为什么会有docker出现？"></a>1.2 问题：为什么会有docker出现？</h2><p>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验 , 这个时候 Docker 横空出世，是因为它对此给出了一个标准化的解决方案。<br>        环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114035.png" alt="download"></p>
<p>之前，可以发现，每发布一个程序，都要走一遍以上的流程：</p>
<h2 id="1-2-什么是Docker"><a href="#1-2-什么是Docker" class="headerlink" title="1.2 什么是Docker"></a>1.2 什么是Docker</h2><p> Docker 是一个开源的应用容器引擎，基于 Go 语言开发。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
<p>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。</p>
<p><strong>总之一句话：只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作 。</strong></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114137.png" alt="download (1)"></p>
<p>为什么选择Docker?</p>
<ul>
<li>Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现“这段代码在我机器上没问题啊”这类问题；——一致的运行环境</li>
<li>可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间</li>
<li>避免公用的服务器，资源会容易受到其他用户的影响。——隔离性</li>
<li>善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展</li>
<li>可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便</li>
<li>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署</li>
</ul>
<p>Docker应用场景</p>
<p>① Web 应用的自动化打包和发布<br>② 自动化测试和持续集成、发布<br>③ 在服务型环境中部署和调整数据库或其他的后台应用</p>
<p>使用Docker可以实现开发人员的开发环境、测试人员的测试环境、运维人员的生产环境的一致性。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114238.png" alt="download (2)"></p>
<p>Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计<br>中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p>
<h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p> 下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p>
<p>传统虚拟机<img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114334.png" alt="download (3)"></p>
<p>传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（如：VirtualBox和VMWare等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装从操作系统，在从操作系统中安装部署各种应用。</p>
<p>Docker</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114448.png" alt="download (4)"></p>
<p>Docker容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统虚拟机则是在硬件层面实现虚拟化。与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p>
<p>使用上的区别<img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114515.png" alt="download (5)"></p>
<p>简单来说： 容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</p>
<h2 id="1-4-Docker-组件"><a href="#1-4-Docker-组件" class="headerlink" title="1.4 Docker 组件"></a>1.4 Docker 组件</h2><h3 id="1-4-1-Docker组成部分"><a href="#1-4-1-Docker组成部分" class="headerlink" title="1.4.1 Docker组成部分"></a>1.4.1 Docker组成部分</h3><p> Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114547.png" alt="download (6)"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201114633.png" alt="download (7)"></p>
<h3 id="1-4-2-Docker镜像与容器"><a href="#1-4-2-Docker镜像与容器" class="headerlink" title="1.4.2 Docker镜像与容器"></a>1.4.2 Docker镜像与容器</h3><p>镜像：类似虚拟机镜像 , 是一个特殊的文件系统</p>
<p>操作系统分为内核和用户空间。对于Linux而言，内核启动后，会挂载root文件系统为其提供用户空间支持。而Docker镜像（Image），就相当于是一个root文件系统。</p>
<p>Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<p>容器：类似linux系统环境，运行和隔离应用。是镜像运行时的实体</p>
<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。</p>
<p>仓库：集中存放镜像文件的地方。</p>
<p>镜像构建完成后，可以很容易的在当前宿主上运行，但是， 如果需要在其它服务器上使用这个镜像，我们就需要一个集中存储、分发镜像的地方，比如后面我们要学的，Docker Registry就是这样的服务。</p>
<h3 id="1-4-3-Registry（注册中心）"><a href="#1-4-3-Registry（注册中心）" class="headerlink" title="1.4.3 Registry（注册中心）"></a>1.4.3 Registry（注册中心）</h3><p> Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p>
<p> <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p> Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p>
<p>由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201203539.png" alt="image-20201201201630729"></p>
<p>（1）yum 包更新到最新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201203537.png" alt="image-20201201201939671"></p>
<p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">上次元数据过期检查：0:09:56 前，执行于 2020年12月01日 星期二 20时10分54秒。</span><br><span class="line">软件包 device-mapper-persistent-data-0.8.5-3.el8.x86_64 已安装。</span><br><span class="line">软件包 lvm2-8:2.03.08-3.el8.x86_64 已安装。</span><br><span class="line">依赖关系解决。</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> 软件包               架构              版本                         仓库               大小</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">安装:</span><br><span class="line"> yum-utils            noarch            4.0.12-4.el8_2               BaseOS             66 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">安装  1 软件包</span><br><span class="line"></span><br><span class="line">总下载：66 k</span><br><span class="line">安装大小：20 k</span><br><span class="line">下载软件包：</span><br><span class="line">yum-utils-4.0.12-4.el8_2.noarch.rpm                          119 kB&#x2F;s |  66 kB     00:00    </span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">总计                                                          63 kB&#x2F;s |  66 kB     00:01     </span><br><span class="line">警告：&#x2F;var&#x2F;cache&#x2F;dnf&#x2F;BaseOS-929b586ef1f72f69&#x2F;packages&#x2F;yum-utils-4.0.12-4.el8_2.noarch.rpm: 头V3 RSA&#x2F;SHA256 Signature, 密钥 ID 8483c65d: NOKEY</span><br><span class="line">CentOS-8 - Base                                              1.6 MB&#x2F;s | 1.6 kB     00:00    </span><br><span class="line">导入 GPG 公钥 0x8483C65D:</span><br><span class="line"> Userid: &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span><br><span class="line"> 指纹: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span><br><span class="line"> 来自: &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-centosofficial</span><br><span class="line">导入公钥成功</span><br><span class="line">运行事务检查</span><br><span class="line">事务检查成功。</span><br><span class="line">运行事务测试</span><br><span class="line">事务测试成功。</span><br><span class="line">运行事务</span><br><span class="line">  准备中  :                                                                              1&#x2F;1 </span><br><span class="line">  安装    : yum-utils-4.0.12-4.el8_2.noarch                                              1&#x2F;1 </span><br><span class="line">  运行脚本: yum-utils-4.0.12-4.el8_2.noarch                                              1&#x2F;1 </span><br><span class="line">  验证    : yum-utils-4.0.12-4.el8_2.noarch                                              1&#x2F;1 </span><br><span class="line">Installed products updated.</span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  yum-utils-4.0.12-4.el8_2.noarch                                                            </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）设置yum源为阿里云</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201203533.png" alt="image-20201201202212687"></p>
<p>（4）安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201203530.png" alt="image-20201201202351176"></p>
<p>centos8默认使用podman代替docker，所以需要containerd.io</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>继续安装Docker</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201203528.png" alt="image-20201201202537445"></p>
<p>（5）安装后查看docker版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201203525.png" alt="image-20201201202700081"></p>
<h2 id="2-2-设置ustc的镜像"><a href="#2-2-设置ustc的镜像" class="headerlink" title="2.2 设置ustc的镜像"></a>2.2 设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p>
<p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p>
<p>编辑该文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">报错&quot;&#x2F;etc&#x2F;docker&#x2F;daemon.json&quot; E212: Can&#39;t open file for writing</span><br></pre></td></tr></table></figure>

<p>原因：centos8需要先启动docker服务，此时系统自动产生/etc/docker目录，此时才能生成daemon.json文件并进行编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>在该文件中输入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201204351.png" alt="image-20201201204351529"></p>
<h2 id="2-3-Docker的启动与停止"><a href="#2-3-Docker的启动与停止" class="headerlink" title="2.3 Docker的启动与停止"></a>2.3 Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p>
<p>启动docker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>查看docker状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201204602.png" alt="image-20201201204602906"></p>
<p>q 退出</p>
<p>停止docker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201205625.png" alt="image-20201201205625248"></p>
<p>重启docker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>开机启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>查看docker概要信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker info</span><br><span class="line">Client:</span><br><span class="line"> Debug Mode: false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 0</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 0</span><br><span class="line"> Server Version: 19.03.13</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Native Overlay Diff: true</span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 4.18.0-193.28.1.el8_2.x86_64</span><br><span class="line"> Operating System: CentOS Linux 8 (Core)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 3.664GiB</span><br><span class="line"> Name: localhost.localdomain</span><br><span class="line"> ID: G3LC:FVAP:SHRP:DER4:7ALK:T3X6:UEBP:AKRF:DQN4:CSW6:EDFG:SUVX</span><br><span class="line"> Docker Root Dir: &#x2F;var&#x2F;lib&#x2F;docker</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Registry: https:&#x2F;&#x2F;index.docker.io&#x2F;v1&#x2F;</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0&#x2F;8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&#x2F;</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看docker帮助文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201205813.png" alt="image-20201201205813517"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201205841.png" alt="download"></p>
<p>指令介绍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp:本地文件系统(OS操作系统|宿主机)和容器之间进行文件或者文件夹拷贝</span><br><span class="line">exec:登录一个容器，使用命令行操作正在运行的容器。</span><br><span class="line">images:镜像的集合查询。</span><br><span class="line">ps:容器列表</span><br><span class="line">pull:下载镜像</span><br><span class="line">restart:重启一个或多个容器</span><br><span class="line">rm:删除一个或多个容器</span><br><span class="line">rmi:删除一个或多个镜像</span><br><span class="line">run:创建一个容器，并运行起来</span><br><span class="line">save:导出镜像到一个文件(tar)中</span><br><span class="line">search:搜索镜像（从Docker Hub）</span><br><span class="line">start：启动一个或多个已经停止的容器</span><br><span class="line">restart:重启动一个或多个已经停止的容器</span><br><span class="line">stop：停止一个或多个正在运行的容器</span><br></pre></td></tr></table></figure>

<h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><h2 id="3-1镜像相关命令"><a href="#3-1镜像相关命令" class="headerlink" title="3.1镜像相关命令"></a>3.1镜像相关命令</h2><h3 id="3-1-1-查看镜像"><a href="#3-1-1-查看镜像" class="headerlink" title="3.1.1 查看镜像"></a>3.1.1 查看镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看镜像可以使用如下命令：</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201210057.png" alt="image-20201201210057729"></p>
<p><code>REPOSITORY</code>：镜像名称</p>
<p><code>TAG</code>：镜像标签</p>
<p><code>IMAGE ID</code>：镜像ID</p>
<p><code>CREATED</code>：镜像的创建日期（不是获取该镜像的日期）</p>
<p><code>SIZE</code>：镜像大小</p>
<p>这些镜像都是存储在Docker的 <code>/var/lib/docker</code> 目录下</p>
<h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</span><br><span class="line">docker search 镜像名称</span><br><span class="line"># 比如 docker search nginx</span><br></pre></td></tr></table></figure>

<p>例如 搜索一个 <code>nginx</code> 镜像</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201210221.png" alt="image-20201201210221276"></p>
<p><code>NAME</code>：仓库名称</p>
<p><code>DESCRIPTION</code>：镜像描述</p>
<p><code>STARS</code>：用户评价，反应一个镜像的受欢迎程度</p>
<p><code>OFFICIAL</code>：是否官方</p>
<p><code>AUTOMATED</code>：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p>
<h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 拉取镜像就是从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本 </span><br><span class="line">命令如下：</span><br><span class="line">docker pull 镜像名称</span><br><span class="line"># 例如，我要下载centos7镜像</span><br><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201210513.png" alt="image-20201201210513185"></p>
<p>刚刚下载的镜像通过 <code>docker images</code> 就可以查看</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201210530.png" alt="image-20201201210530570"></p>
<h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可以按照镜像id删除镜像，命令如下：</span><br><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure>

<p>删除 <code>nginx</code> 镜像</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201210718.png" alt="image-20201201210718106"></p>
<p>删除所有镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi &#96;docker images -q&#96;</span><br></pre></td></tr></table></figure>

<h3 id="3-15-从Docker-Hub拉取"><a href="#3-15-从Docker-Hub拉取" class="headerlink" title="3.15 从Docker Hub拉取"></a>3.15 从Docker Hub拉取</h3><p>Docker镜像首页，包括官方镜像和其它公开镜像。Docker Hub上最受欢迎的10大镜像（通过Docker registry API获取不了镜像被pull的个数，只能通过镜像的stars数量，来衡量镜像的流行度。毫无疑问，拥有最高stars数量的库都是官方库）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hub.docker.com&#x2F;search?image_filter&#x3D;official&amp;type&#x3D;image</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201210850.png" alt="image-20201201210849913"></p>
<p>国情的原因，国内下载 Docker HUB 官方的相关镜像比较慢，可以使用国内（docker.io）的一些镜像加速器，镜像保持和官方一致，关键是速度块，推荐使用。</p>
<h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><p>容器，也是docker中的核心概念，镜像是创建容器的软件 , 容器是由镜像运行产生的运行实例。镜像和容器的关系，就如同Java语言中类和对象的关系。</p>
<p>如果需要通俗的描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201211002.png" alt="download"></p>
<h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p>查看正在运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201211032.png" alt="image-20201201211032724"></p>
<p>查看最后一次运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps –l</span><br></pre></td></tr></table></figure>

<p>l：last</p>
<p>查看停止的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -f status&#x3D;exited</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>① 什么是宿主机？</p>
<p>就是主机，这个概念是相对于子机而言的，比如你安装有虚拟机的话，那么相对于虚拟机而言，你正在使用的计算机就是宿主机，虚拟机是安装在主机上的，必须在主机上才能运行，主机就是一个“宿主”。</p>
<p>② 创建容器常用的参数说明：</p>
<p><strong>创建容器命令：docker run</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i：表示运行容器</span><br><span class="line"></span><br><span class="line">-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</span><br><span class="line"></span><br><span class="line">--name :为创建的容器命名。</span><br><span class="line"></span><br><span class="line">-v：表示目录映射关系（前者是宿主机目录，后者是映射到容器上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</span><br><span class="line"></span><br><span class="line">-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</span><br><span class="line"></span><br><span class="line">-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</span><br></pre></td></tr></table></figure>

<p>（1）交互式方式创建容器</p>
<p>以交互式方式创建并启动容器，启动完成后，直接进入当前容器。使用exit命令退出容器。需要注意的是以此种方式启动容器，如果退出容器，则容器会进入停止状态。可以理解成交互式容器 是前台容器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name&#x3D;容器名称 镜像名称:标签 &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 比如：docker run -it --name&#x3D;mycentos centos:7 &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># docker run:表示创建容器</span><br><span class="line"></span><br><span class="line"># -it：表示运行容器并进入它的命令行</span><br><span class="line"></span><br><span class="line"># --name&#x3D;mycentos：给当前的容器命名</span><br><span class="line"></span><br><span class="line"># centos:7：使用该镜像创建</span><br><span class="line"></span><br><span class="line"># &#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>准备镜像</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201211752.png" alt="image-20201201211751985"></p>
<p>创建容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name&#x3D;mycentos centos:latest</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201211919.png" alt="image-20201201211919842"></p>
<p>创建好容器，并且已经进入到容器内部了，可以直接观察前面中括号里面的内容发现，跟创建容器之前不一样了，</p>
<p>并且 通过 dir 命令，会发现，其实容器内部也是一个 <code>centos</code> , 我们可以把每个容器都看成一个小电脑或者服务器</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201211956.png" alt="image-20201201211956083"></p>
<p>重新开一个新的会话，查看刚刚创建的容器是否已经有了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看正在运行的容器</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212055.png" alt="image-20201201212055091"></p>
<p>退出当前容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212143.png" alt="image-20201201212142953"></p>
<p>退出之后，容器也退出了，没有删除</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212224.png" alt="image-20201201212224526"></p>
<p><strong>（3）守护式方式创建容器：</strong></p>
<p>创建一个守护式容器；如果对于一个需要长期运行的容器来说，我们可以创建一个守护式容器。命令如下（容器名称不能重复）：守护容器可以理解成在后台运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 守护式容器和交互式容器的创建方式区别：</span><br><span class="line"># ① -it 换成 -di</span><br><span class="line"># ② 去掉后面的 &#x2F;bin&#x2F;bash</span><br><span class="line">docker run -di --name&#x3D;容器名称 镜像名称:标签</span><br><span class="line"># 比如：docker run -di --name&#x3D;mycentos10 centos:latest</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212414.png" alt="image-20201201212413988"></p>
<p><strong>进入守护式容器方式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名称 (或者容器ID)  &#x2F;bin&#x2F;bash</span><br><span class="line"># 比如  docker exec -it mycentos10 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212517.png" alt="image-20201201212517395"></p>
<p>已经进入到容器内部了，如果现在退出，然后查看容器是否还在后台运行</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212552.png" alt="image-20201201212552182"></p>
<p>守护容器不会主动退出</p>
<h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p>停止容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop 容器名称（或者容器ID）</span><br><span class="line">例如： docker stop mycentos10</span><br></pre></td></tr></table></figure>

<p>查看容器是否已经停止</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212740.png" alt="image-20201201212740675"></p>
<p>启动容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start 容器名称（或者容器ID）</span><br><span class="line">例如： docker start mycentos10</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201212823.png" alt="image-20201201212823170"></p>
<h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p>我们需要在容器内安装一个软件，软件首先需要有安装包，我们就需要把安装包拷贝到容器内。我们通常的操作是先把文件上传到宿主机，然后我们在将文件从宿主机拷贝到容器内的某个目录下面进行安装。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201223459.png" alt="image-20201201223414163"></p>
<p>如果我们需要将文件拷贝到容器内可以使用cp命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br><span class="line">例如： docker cp anaconda-ks.cfg mycentos10:&#x2F;usr&#x2F;local&#x2F;</span><br></pre></td></tr></table></figure>

<p>拷贝一个文件到 <code>mycentos10 </code>的/urs/local/<code> 文件下面 ，拷贝完成之后，删除文件，然后在</code>mycentos10`拷贝过来</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201223718.png" alt="image-20201201223718498"></p>
<p>登录容器查看拷贝之后的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mycentos10 &#x2F;bin&#x2F;bash</span><br><span class="line">docker exec：表示登陆正在运行的容器</span><br><span class="line">-it：进入命令行</span><br><span class="line">mycentos10：进入到该容器</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201225441.png" alt="image-20201201225441825"></p>
<p>也可以将文件从容器内拷贝出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br><span class="line">例如：docker cp mycentos10:&#x2F;usr&#x2F;local&#x2F;anaconda-ks.cfg ~</span><br></pre></td></tr></table></figure>

<p>我们先通过 <code>exit</code> 退出容器，然后在把文件从容器拷贝到当前目录</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201225640.png" alt="image-20201201225640418"></p>
<h3 id="3-2-5-目录挂载"><a href="#3-2-5-目录挂载" class="headerlink" title="3.2.5 目录挂载"></a>3.2.5 目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。</p>
<p>创建容器 添加-v参数 后边为 宿主机目录:容器目录，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建并启动容器mycentos3,并挂载linux中的&#x2F;usr&#x2F;local&#x2F;myhtml目录到容器的&#x2F;usr&#x2F;local&#x2F;myhtml；也就是在linux中的&#x2F;usr&#x2F;local&#x2F;myhtml中操作相当于对容器相应目录操作</span><br><span class="line">docker run -di --name&#x3D;容器的名字 -v &#x2F;usr&#x2F;local&#x2F;myhtml:&#x2F;usr&#x2F;local&#x2F;myhtml --name&#x3D;mycentos3 centos:7</span><br><span class="line"></span><br><span class="line">比如：docker run -di --name&#x3D;mycentos3 -v &#x2F;usr&#x2F;local&#x2F;myhtml:&#x2F;usr&#x2F;local&#x2F;myhtml centos:latest</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201224934.png" alt="image-20201201224933985"></p>
<p>通过 <code>docker ps</code> 查看刚刚创建的容器是否已经创建</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201225050.png" alt="image-20201201225050394"></p>
<p>进入到 myhtml 目录 ，通过dir查看是否有文件，通过vi test2 ，创建一个文件，进入test2文件，随便输入一些数据</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201225926.png" alt="image-20201201225926178"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201230015.png" alt="image-20201201230015688"></p>
<p>进入目录随便输入一些东西 ， 退出保存</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201230032.png" alt="image-20201201230032545"></p>
<p>登录容器，查看刚刚输入的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入容器</span><br><span class="line">docker exec -it mycentos3 &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 进入容器中查看目录</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;myhtml</span><br><span class="line"></span><br><span class="line"># 查看myhtml目录中，是否有对应文件test</span><br><span class="line">ls</span><br><span class="line">cat test</span><br><span class="line"></span><br><span class="line"># 退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201230343.png" alt="image-20201201230343697"></p>
<p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p>
<p>这是因为CentOS中的安全模块selinux把权限禁掉了，我们需要添加参数 –privileged=true 来解决挂载的目录没有权限的问题</p>
<h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect 容器名称（容器ID） </span><br><span class="line"></span><br><span class="line"># 在linux宿主机下查看 mycentos3 的ip</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201230524.png" alt="image-20201201230524172"></p>
<p>IP 地址</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201230609.png" alt="image-20201201230609756"></p>
<p>通过inspect 可以查看的信息太多，如果想单纯有针对性的查看某个信息，也可以直接执行下面的命令直接输出IP地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect --format&#x3D;&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称（容器ID）</span><br><span class="line"># 例如：docker inspect --format&#x3D;&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; mycentos3</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201230648.png" alt="image-20201201230647953"></p>
<h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm 容器名称（容器ID）</span><br><span class="line">例如：docker rm mycentos11</span><br></pre></td></tr></table></figure>

<p>删除容器的时候，如果容器在运行，会报错，必须先停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"># 停止容器</span><br><span class="line">docker stop mycentos10</span><br><span class="line"></span><br><span class="line"># 删除容器</span><br><span class="line">docker rm mycentos10</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201230953.png" alt="image-20201201230953001"></p>
<h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201231344.png" alt="download"></p>
<p>（1）拉取mysql镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull centos&#x2F;mysql-57-centos7</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201231534.png" alt="image-20201201231534920"></p>
<p>（2）创建容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建mysql5.7容器</span><br><span class="line"># docker run -di --name&#x3D;容器名字 -p 宿主机端口:容器端口 -e MYSQL_ROOT_PASSWORD&#x3D;mysql密码 容器名称</span><br><span class="line"></span><br><span class="line">docker run -di --name&#x3D;mysql5.7 -p 33306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 centos&#x2F;mysql-57-centos7</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201231639.png" alt="image-20201201231639562"></p>
<p>（3）远程登录mysql</p>
<p>连接宿主机的IP ,指定端口为33306</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201231807.png" alt="image-20201201231807283"></p>
<h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull tomcat:7-jre7</span><br></pre></td></tr></table></figure>

<p>tomcat9 有待解决bug</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201232150.png" alt="image-20201201232150845"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233226.png" alt="image-20201201233226259"></p>
<p>（2）创建容器</p>
<p>创建容器 -p表示地址映射 -v 表示目录挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建tomcat容器;并挂载了webapps目录</span><br><span class="line">docker run -di --name&#x3D;mytomcat -p 9000:8080 -v &#x2F;usr&#x2F;local&#x2F;webapps:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps tomcat:7-jre7</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233315.png" alt="image-20201201233315844"></p>
<p>本地的war包 ，上传到docker容器里面</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201232508.png" alt="image-20201201232507928"></p>
<p>ls 查看 dubbo的war 是否已经上传到docker容器，上传成功之后，请求 <code>http://192.168.43.129:9000/dubbo-admin-2.6.0/</code></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233425.png" alt="image-20201201233425483"></p>
<h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233543.png" alt="image-20201201233543461"></p>
<p>（2）创建Nginx容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -di --name&#x3D;mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233608.png" alt="image-20201201233608728"></p>
<p>安装完成之后，请求nginx页面</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233629.png" alt="image-20201201233628994"></p>
<h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233734.png" alt="image-20201201233734395"></p>
<p>（2）创建容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -di --name&#x3D;myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201233751.png" alt="image-20201201233751194"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201201234030.png" alt="image-20201201234030154"></p>
<h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202090213.png"></p>
<p>其中涉及到的命令有：</p>
<ul>
<li><p>docker commit 将容器保存为镜像</p>
</li>
<li><p>docker save 将镜像备份为tar文件</p>
</li>
<li><p>docker load 根据tar文件恢复为镜像</p>
</li>
</ul>
<h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 保存nginx容器为镜像</span><br><span class="line">docker commit 容器名称  镜像名称</span><br><span class="line">例如：docker commit mynginx mynginx_i</span><br></pre></td></tr></table></figure>

<p>使用 <code>docker ps -a</code> 查看所有的容器</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202100530.png" alt="image-20201202100530107"></p>
<p>看到有一个<code>mynginx</code> 容器 , 将容器保存为一个镜像：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202100657.png" alt="image-20201202100657290"></p>
<p>查看镜像是否保存成功</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202100732.png" alt="image-20201202100731966"></p>
<p>使用刚刚保存的镜像 ，重新创建一个容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -di --name&#x3D;mynginx2 -p 81:80 mynginx_i</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202100924.png" alt="image-20201202100924930"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202101018.png" alt="image-20201202101017849"></p>
<p>通过 <code>docker ps</code>查看正在运行的容器，可以找到刚刚创建的容器<code>mynginx2</code></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202101057.png" alt="image-20201202101057357"></p>
<h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令形式：docker save –o tar文件名 镜像名</span><br><span class="line"># 保存镜像为文件 -o：表示output 输出的意思</span><br><span class="line">docker  save -o mynginx.tar mynginx_i</span><br></pre></td></tr></table></figure>

<p>通过 save 保存成文件之后，在通过 ls 命令进行查看当前目录是否有 tar文件</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202101307.png" alt="image-20201202101307554"></p>
<h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像 然后执行此命令进行恢复</p>
<p>直接删除 <code>mynginx_i</code> 镜像 ，发现会报错，因为当前镜像的容器正在运行，需要先停止容器，删除容器 ， 在删除镜像<img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202101654.png" alt="image-20201202101654789"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop mynginx2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm mynginx2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi mynginx_i</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202101832.png" alt="image-20201202101832679"></p>
<p><code>mynginx_i</code> 镜像已经被删除</p>
<p><strong>恢复镜像</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令形式：docker load -i tar文件名</span><br><span class="line">docker load -i mynginx.tar</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202102037.png" alt="image-20201202102037387"></p>
<h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6 Dockerfile"></a>6 Dockerfile</h1><h2 id="6-1-什么是Dockerfile"><a href="#6-1-什么是Dockerfile" class="headerlink" title="6.1 什么是Dockerfile"></a>6.1 什么是Dockerfile</h2><p>要获得镜像，可以从Docker仓库中进行下载。那如果我们想自己开发一个镜像，那该如何做呢？答案是：Dockerfile<br>Dockerfile其实就是一个文本文件，由一系列命令和参数构成，Docker可以读取Dockerfile文件并根据Dockerfile文件的描述来构建镜像。</p>
<p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p>
<h2 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>FROM image_name:tag</td>
<td>定义了使用哪个基础镜像启动构建流程</td>
</tr>
<tr>
<td>MAINTAINER user_name</td>
<td>声明镜像的创建者</td>
</tr>
<tr>
<td>ENV key value</td>
<td>设置环境变量 (可以写多条)</td>
</tr>
<tr>
<td>RUN command</td>
<td>是Dockerfile的核心部分(可以写多条)</td>
</tr>
<tr>
<td>ADD source_dir/file dest_dir/file</td>
<td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td>
</tr>
<tr>
<td>COPY source_dir/file dest_dir/file</td>
<td>和ADD相似，但是如果有压缩文件并不能解压</td>
</tr>
<tr>
<td>WORKDIR path_dir</td>
<td>设置工作目录</td>
</tr>
</tbody></table>
<h2 id="6-3-使用脚本创建镜像"><a href="#6-3-使用脚本创建镜像" class="headerlink" title="6.3 使用脚本创建镜像"></a>6.3 使用脚本创建镜像</h2><p>步骤：</p>
<p>（1）创建目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir –p &#x2F;usr&#x2F;local&#x2F;dockerjdk8</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202102317.png" alt="image-20201202102317383"></p>
<p>（2）下载jdk-8u144-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202102426.png" alt="image-20201202102426492"></p>
<p>（3）创建文件Dockerfile <code>vim Dockerfile</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dockerfile 名字不要改</span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#依赖镜像名称和ID</span><br><span class="line">FROM centos:latest</span><br><span class="line">#指定镜像创建者信息</span><br><span class="line">MAINTAINER ilusymon</span><br><span class="line">#切换工作目录</span><br><span class="line">WORKDIR &#x2F;usr</span><br><span class="line">RUN mkdir  &#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">#ADD 是相对路径jar,把java添加到容器中</span><br><span class="line">ADD jdk-8u144-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_144</span><br><span class="line">ENV JRE_HOME $JAVA_HOME&#x2F;jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202102812.png" alt="image-20201202102812461"></p>
<p>（4）执行命令构建镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t&#x3D;&#39;jdk1.8&#39; .</span><br></pre></td></tr></table></figure>

<p>注意后边的空格和点，不要省略</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202102928.png" alt="image-20201202102928840"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202102957.png" alt="image-20201202102957565"></p>
<h1 id="7-Docker私有仓库"><a href="#7-Docker私有仓库" class="headerlink" title="7 Docker私有仓库"></a>7 Docker私有仓库</h1><p>（1）拉取私有仓库镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202103151.png" alt="image-20201202103151366"></p>
<p>（2）启动私有仓库容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -di --name&#x3D;registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202103223.png" alt="image-20201202103223439"></p>
<p>（3）打开浏览器 输入地址 <code>http://192.168.43.129:5000/v2/_catalog</code> 看到<code>&#123;&quot;repositories&quot;:[]&#125;</code> 表示私有仓库搭建成功并且内容为空</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202103405.png" alt="image-20201202103405867"></p>
<p>（4）修改daemon.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure>

<p>添加以下内容，保存退出。目的是让容器信任下面的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;insecure-registries&quot;:[&quot;192.168.43.129:5000&quot;]</span><br></pre></td></tr></table></figure>

<p>此步用于让 docker信任私有仓库地址 ，然后退出保存</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202103558.png" alt="image-20201202103558308"></p>
<p>（5）重启docker 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202103800.png" alt="image-20201202103800311"></p>
<h2 id="7-2-镜像上传至私有仓库"><a href="#7-2-镜像上传至私有仓库" class="headerlink" title="7.2 镜像上传至私有仓库"></a>7.2 镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1、标记镜像为私有仓库的镜像  </span><br><span class="line"># docker tag jdk1.8 宿主机IP:5000&#x2F;jdk1.8</span><br><span class="line">docker tag jdk1.8 192.168.43.129:5000&#x2F;jdk1.8</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202103948.png" alt="image-20201202103948525"></p>
<p>（2）再次启动私服容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 2、再次启动私有仓库容器  </span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202104025.png" alt="image-20201202104025020"></p>
<p>（3）上传标记的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 3、上传标记的镜像  </span><br><span class="line"># docker push 宿主机IP:5000&#x2F;jdk1.8</span><br><span class="line">docker push 192.168.43.129:5000&#x2F;jdk1.8</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202104134.png" alt="image-20201202104133929"></p>
<p>重新刷新，发现jdk 1.8 已经上传到私服</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202104150.png" alt="image-20201202104150715"></p>
<h2 id="7-3-从私有仓库拉取镜像"><a href="#7-3-从私有仓库拉取镜像" class="headerlink" title="7.3 从私有仓库拉取镜像"></a>7.3 从私有仓库拉取镜像</h2><h3 id="7-3-1-其它服务器拉取私有仓库镜像"><a href="#7-3-1-其它服务器拉取私有仓库镜像" class="headerlink" title="7.3.1 其它服务器拉取私有仓库镜像"></a>7.3.1 其它服务器拉取私有仓库镜像</h3><p>大多数情况下，都是某台服务器部署了私有镜像仓库之后；到其它服务器上从私有仓库中拉取镜像，若要拉取私有仓库镜像需要去修改docker的配置文件，设置启动时候的仓库地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打开配置文件</span><br><span class="line">vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service</span><br><span class="line"># 在打开的上述文件中按照下面的图，添加如下的内容；注意修改下面内容中的ip地址</span><br><span class="line">--add-registry&#x3D;192.168.43.129:5000&#x2F; --insecure-registry&#x3D;192.168.43.129:5000 \</span><br><span class="line"># 修改完后需要重新加载docker配置文件并重启docker</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202113153.png" alt="image-20201202113153469"></p>
<p>配置完成之后，需要重启 <code>docker</code> 和修改 配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202105302.png" alt="image-20201202105301971"></p>
<p>在重启之后；就可以去拉取私有仓库中的镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行拉取镜像命令并查看</span><br><span class="line">docker pull 192.168.43.129:5000&#x2F;jdk1.8</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202113032.png" alt="image-20201202113031914"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201202113238.png" alt="image-20201202113238228"></p>
]]></content>
      <tags>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式RPC框架Apache Dubbo</title>
    <url>/2020/11/29/%E5%88%86%E5%B8%83%E5%BC%8FRPC%E6%A1%86%E6%9E%B6Apache%20Dubbo/</url>
    <content><![CDATA[<p>Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和Spring框架无缝集成。<br>        Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<a id="more"></a>

<h2 id="1-软件架构的演进过程"><a href="#1-软件架构的演进过程" class="headerlink" title="1. 软件架构的演进过程"></a>1. 软件架构的演进过程</h2><p>软件架构的发展经历了由单体架构、垂直架构、SOA架构到微服务架构的演进过程，下面我们分别了解一下这几个架构。</p>
<h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1 单体架构"></a>1.1 单体架构</h3><p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140033.png" alt="download"></p>
<p>一个归档包（例如war格式或者Jar格式）包含了应用所有功能的应用程序，我们通常称之为单体应用。架构单体应用的方法论，我们称之为单体应用架构，这是一种比较传统的架构风格。。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140148.png" alt="download (1)"></p>
<p>架构说明：</p>
<p> 全部功能集中在一个项目内（All in one）。</p>
<p>架构优点：</p>
<p> 架构简单，前期开发成本低、开发周期短，适合小型项目。</p>
<p>架构缺点：</p>
<p>① 复杂性高</p>
<p>整个项目包含的模块非常多，模块的边界模糊，依赖关系不清晰，代码质量参差不齐,整个项目非常复杂。每次修改代码都心惊胆战，甚至添加一个简单的功能，或者修改一个BUG都会造成隐含的缺陷。</p>
<p>② 技术债务逐渐上升</p>
<p>随着时间推移、需求变更和人员更迭，会逐渐形成应用程序的技术债务，并且越积越多。已使用的系统设计或代码难以修改，因为应用程序的其他模块可能会以意料之外的方式使用它。</p>
<p>③ 部署速度逐渐变慢</p>
<p>随着代码的增加，构建和部署的时间也会增加。而在单体应用中，每次功能的变更或缺陷的修复都会导致我们需要重新部署整个应用。全量部署的方式耗时长、影响范围大、风险高，这使得单体应用项目上线部署的频率较低，从而又导致两次发布之间会有大量功能变更和缺陷修复，出错概率较高。</p>
<p>④ 扩展能力受限，无法按需伸缩</p>
<p>单体应用只能作为一个整体进行扩展，无法结合业务模块的特点进行伸缩。</p>
<p>⑤ 阻碍技术创新</p>
<p>单体应用往往使用统一的技术平台或方案解决所有问题，团队的每个成员都必须使用相同的开发语言和架构，想要引入新的框架或技术平台非常困难。</p>
<p>总结：</p>
<p> 全部功能集成在一个工程中，对于大型项目不易开发、扩展和维护。</p>
<p> 技术栈受限，只能使用一种语言开发。</p>
<p> 系统性能扩展只能通过扩展集群节点，成本高。</p>
<p>项目目录结构</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140231.png" alt="download"></p>
<h3 id="1-2-垂直架构"><a href="#1-2-垂直架构" class="headerlink" title="1.2 垂直架构"></a>1.2 垂直架构</h3><p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140340.png" alt="download"></p>
<p>架构说明：</p>
<p> 按照业务进行切割，形成小的单体项目。</p>
<p> 垂直MVC项目主要有表现层，业务逻辑层，数据访问层组成的MVC架构，整个项目打包放在一个tomcat里面。适合于 访问量小，用户数不多的业务。</p>
<p>架构优点：</p>
<p> 技术栈可扩展（不同的系统可以用不同的编程语言编写）。</p>
<p>架构缺点：</p>
<p> ① 这是一个大而全的项目，项目的部署效率很低，代码全量编译和部署一次发布需要很长时间，更重要的是 如果某个功能出错有问题，所有的功能都需要再重新打包编译，部署效率极低。</p>
<p> ② 团队协作难度高，如多人使用 <code>git</code> 很可能在同一个功能上，多人同时进行了修改，作为一个大而全的项目，可能个人只是需要开发其中一个小的模块的需求，却需要导入整个项目全量的代码。</p>
<p>总结：</p>
<p> 功能集中在一个项目中，不利于开发、扩展、维护。</p>
<p> 系统扩张只能通过集群的方式。</p>
<p> 项目之间功能冗余、数据冗余、耦合性强。</p>
<p>项目目录结构</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140405.png" alt="download"></p>
<h3 id="1-3-SOA架构"><a href="#1-3-SOA架构" class="headerlink" title="1.3 SOA架构"></a>1.3 SOA架构</h3><p><code>SOA</code> 全称为 <code>Service-Oriented Architecture</code>，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p>
<p>站在功能的角度，把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140458.png" alt="download (2)"></p>
<p>架构说明：</p>
<p> 将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁。</p>
<p>ESB</p>
<p>简单 来说 ESB 就是一根管道，用来连接各个服务节点。为了集 成不同系统，不同协议的服务，ESB 做了消息的转化解释和路由工作，让不同的服务互联互通；</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140524.png" alt="download (3)"></p>
<ul>
<li><p>架构优点：</p>
<p> 重复功能或模块抽取为服务，提高开发效率。</p>
<p> 可重用性高。</p>
<p> 可维护性高。</p>
<p>架构缺点：</p>
<p> 各系统之间业务不同，很难确认功能或模块是重复的。</p>
<p> 抽取服务的粒度大。</p>
<p> 系统和服务之间耦合度高。</p>
<p>从单体应用到SOA架构的转变：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151609.png" alt="download"></p>
<h3 id="1-4-微服务架构"><a href="#1-4-微服务架构" class="headerlink" title="1.4 微服务架构"></a>1.4 微服务架构</h3><p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119142012.png" alt=" 微服务架构"></p>
<p>微服务架构:</p>
<p>其实和 SOA 架构类似,微服务是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。</p>
<p>架构说明：</p>
<p> 将系统服务层完全独立出来，抽取为一个一个的微服务。</p>
<p> 抽取的粒度更细，遵循单一原则。</p>
<p> 采用轻量级框架协议传输。</p>
<p>API 服务网关</p>
<p>API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119142118.png" alt="20201119142118"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119141908.png" alt="20201119141908"></p>
</li>
</ul>
<p>  <img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119141926.png" alt="20201119141926"></p>
<p>  架构优点：</p>
<p>   服务拆分粒度更细，有利于提高开发效率。</p>
<p>   可以针对不同服务制定对应的优化方案。</p>
<p>   适用于互联网时代，产品迭代周期更短。</p>
<p>  架构缺点：</p>
<p>   粒度太细导致服务太多，维护成本高。</p>
<p>   分布式系统开发的技术成本高，对团队的挑战大。</p>
<h2 id="2-Apache-Dubbo概述"><a href="#2-Apache-Dubbo概述" class="headerlink" title="2. Apache Dubbo概述"></a>2. Apache Dubbo概述</h2><h3 id="2-1-Dubbo简介"><a href="#2-1-Dubbo简介" class="headerlink" title="2.1 Dubbo简介"></a>2.1 Dubbo简介</h3><p>  Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p>
<p>  <strong>什么是RPC？</strong></p>
<p>  RPC全称为remote procedure call，即<strong>远程过程调用</strong>。比如两台服务器A和B，A服务器上部署一个应用，B服务器上部署一个应用，A服务器上的应用想调用B服务器上的应用提供的方法，由于两个应用不在一个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。</p>
<p>  需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程。</p>
<p>  RPC是一个泛化的概念，严格来说一切远程过程调用手段都属于RPC范畴。各种开发语言都有自己的RPC框架。Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等。</p>
<p>  Dubbo官网地址：<a href="http://dubbo.apache.org/">http://dubbo.apache.org</a></p>
<p>  Dubbo提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<p>  通俗一点说，就是一般程序员对于本地的过程调用很熟悉，那么我们把 RPC 作成和本地调用完全类似，那么就更容易被接受，使用起来毫无障碍。</p>
<h3 id="2-2-Dubbo架构"><a href="#2-2-Dubbo架构" class="headerlink" title="2.2 Dubbo架构"></a>2.2 Dubbo架构</h3><p>  Dubbo架构图（Dubbo官方提供）如下：</p>
<p>  <img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119141421.png" alt="20201119141421"></p>
<p>  节点角色说明：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>角色名称</th>
</tr>
</thead>
<tbody><tr>
<td>Provider</td>
<td>暴露服务的服务提供方</td>
</tr>
<tr>
<td>Consumer</td>
<td>调用远程服务的服务消费方</td>
</tr>
<tr>
<td>Registry</td>
<td>服务注册与发现的注册中心</td>
</tr>
<tr>
<td>Monitor</td>
<td>统计服务的调用次数和调用时间的监控中心</td>
</tr>
<tr>
<td>Container</td>
<td>服务运行容器</td>
</tr>
</tbody></table>
<p>  虚线都是异步访问，实线都是同步访问<br>  蓝色虚线:在启动时完成的功能<br>  红色虚线(实线)都是程序运行过程中执行的功能</p>
<p>  调用关系说明:</p>
<ol>
<li><p>服务容器负责启动，加载，运行服务提供者。</p>
</li>
<li><p>服务提供者在启动时，向注册中心注册自己提供的服务。</p>
</li>
<li><p>服务消费者在启动时，向注册中心订阅自己所需的服务。</p>
</li>
<li><p>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p>
</li>
<li><p>服务消费者，从提供者地址列表中，基于负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>
</li>
<li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>
<h2 id="3-服务注册中心Zookeeper"><a href="#3-服务注册中心Zookeeper" class="headerlink" title="3. 服务注册中心Zookeeper"></a>3. 服务注册中心Zookeeper</h2><p>通过前面的Dubbo架构图可以看到，Registry（服务注册中心）在其中起着至关重要的作用。Dubbo官方推荐使用Zookeeper作为服务注册中心。</p>
<h3 id="3-1-Zookeeper介绍"><a href="#3-1-Zookeeper介绍" class="headerlink" title="3.1 Zookeeper介绍"></a>3.1 Zookeeper介绍</h3><p>Zookeeper 是 Apache Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用 。</p>
<p>为了便于理解Zookeeper的树型目录服务，我们先来看一下我们电脑的文件系统(也是一个树型目录结构)：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140917.png" alt="download"></p>
<p>我的电脑可以分为多个盘符（例如C、D、E等），每个盘符下可以创建多个目录，每个目录下面可以创建文件，也可以创建子目录，最终构成了一个树型结构。通过这种树型结构的目录，我们可以将文件分门别类的进行存放，方便我们后期查找。而且磁盘上的每个文件都有一个唯一的访问路径</p>
<p>Zookeeper树型目录服务：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119140807.png" alt="download (4)"></p>
<p>流程说明：</p>
</li>
</ol>
<ul>
<li>服务提供者(Provider)启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li>
<li>服务消费者(Consumer)启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li>
<li>监控中心(Monitor)启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址</li>
</ul>
<h3 id="3-2-安装Zookeeper"><a href="#3-2-安装Zookeeper" class="headerlink" title="3.2 安装Zookeeper"></a>3.2 安装Zookeeper</h3><p>下载地址：<a href="http://archive.apache.org/dist/zookeeper/">http://archive.apache.org/dist/zookeeper/</a></p>
<h3 id="3-3-启动、停止Zookeeper"><a href="#3-3-启动、停止Zookeeper" class="headerlink" title="3.3 启动、停止Zookeeper"></a>3.3 启动、停止Zookeeper</h3><p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151421.png" alt="download (6)"></p>
<p><strong>需要注意：</strong></p>
<p>Zookeeper在Windows下启动只需要运行zkServer.cmd双击即可（需保证运行环境中正确安装了Java运行环境）</p>
<p>但是在有的时候会出现双击闪退的情况。针对闪退，可按照一下步骤进行解决：</p>
<p>1 、编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。例如原因如下：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151359.png" alt="download (5)"></p>
<p>2、重新双击运行zkServer.cmd</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151346.png" alt="download (4)"></p>
<p>错误原因 ，找不到zoo.cfg配置文件</p>
<p>3、编辑zkEnv.cmd</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151326.png" alt="download (3)"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151308.png" alt="download (2)"></p>
<p>4 、修改如下：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151209.png" alt="download (1)"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151129.png" alt="download"></p>
<p>5、重新双击zkServer.cmd启动</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151041.png" alt="download (11)"></p>
<p>6 zoo_sample.cfg配置文件介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 数据存储目录，修改数据存储目录 ..&#x2F;data 复制的时候注意，小心空格</span><br><span class="line">dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper </span><br><span class="line">&#x2F;&#x2F;默认配置文件，修改路径如下</span><br><span class="line">dataDir&#x3D;..&#x2F;data </span><br><span class="line">&#x2F;&#x2F; 端口</span><br><span class="line">clientPort&#x3D;2181</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119151006.png" alt="download (10)"></p>
<h2 id="4-Dubbo快速入门"><a href="#4-Dubbo快速入门" class="headerlink" title="4. Dubbo快速入门"></a>4. Dubbo快速入门</h2><p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。本小节就是要创建两个应用，一个作为服务的提供方，一个作为服务的消费方。通过Dubbo来实现服务消费方远程调用服务提供方的方法。</p>
<h3 id="4-1-服务提供方开发"><a href="#4-1-服务提供方开发" class="headerlink" title="4.1 服务提供方开发"></a>4.1 服务提供方开发</h3><p>开发步骤：</p>
<p>（1）创建maven工程（打包方式为war）provider，在pom.xml文件中导入如下坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）配置web.xml文件</p>
<p>创建 webapp/WEB-INF/web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）创建服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）创建服务实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maweiqi.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.maweiqi.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HelloServiceImpl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 马 伟 奇</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：服务实现类上使用的 <code>Service</code> 注解是<code>Dubbo</code>提供的，用于对外发布服务</p>
<p>（5）在src/main/resources下创建 <code>applicationContext-service.xml</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:dubbo=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span><br><span class="line">    &lt;dubbo:application name=<span class="string">&quot;dubbodemo_provider&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span><br><span class="line">    &lt;dubbo:registry address=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br><span class="line">    &lt;!-- 注册  协议和port   端口默认是<span class="number">20880</span> --&gt;</span><br><span class="line">    &lt;dubbo:protocol name=<span class="string">&quot;dubbo&quot;</span> port=<span class="string">&quot;20881&quot;</span>/&gt;</span><br><span class="line">    &lt;!-- 扫描指定包，加入<span class="meta">@Service</span>注解的类会被发布为服务  --&gt;</span><br><span class="line">    &lt;dubbo:annotation <span class="keyword">package</span>=<span class="string">&quot;com.dubbo.service.impl&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>（6）启动服务</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119154336.png" alt="image-20201119154336125"></p>
<p>或者：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150918.png" alt="download (9)"></p>
<h3 id="4-2-服务消费方开发"><a href="#4-2-服务消费方开发" class="headerlink" title="4.2 服务消费方开发"></a>4.2 服务消费方开发</h3><p>开发步骤：</p>
<p>（1）创建 <code>maven</code> 工程（打包方式为war）<code>consumer</code>，<code>pom.xml</code> 配置和上面服务提供者相同，只需要将 <code>Tomcat</code> 插件的端口号改为8082即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8082<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）配置web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）将服务提供者工程中的HelloService接口复制到当前工程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.dubbo.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Symon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> HelloController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/19 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：Controller中注入HelloService使用的是Dubbo提供的@Reference注解</strong></p>
<p>（5）在src/main/resources下创建applicationContext-web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo-consumer&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描的方式暴露接口  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.dubbo.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 运行dubbo不检查提供者是否提前开启  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（6）运行测试</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150817.png" alt="download (8)"></p>
<p>在浏览器输入<a href="http://localhost:8082/demo/hello?name=Jack%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C">http://localhost:8082/demo/hello?name=Jack，查看浏览器输出结果</a></p>
<p><strong>思考一：</strong>上面的Dubbo入门案例中我们是将HelloService接口从服务提供者工程(dubbodemo_provider)复制到服务消费者工程(dubbodemo_consumer)中，这种做法是否合适？还有没有更好的方式？</p>
<p><strong>答：</strong>这种做法显然是不好的，同一个接口被复制了两份，不利于后期维护。更好的方式是单独创建一个maven工程，将此接口创建在这个maven工程中。需要依赖此接口的工程只需要在自己工程的pom.xml文件中引入maven坐标即可。</p>
<p><strong>思考二：</strong>在服务消费者工程(dubbodemo_consumer)中只是引用了HelloService接口，并没有提供实现类，Dubbo是如何做到远程调用的？</p>
<p><strong>答：</strong>Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用是通过此代理对象完成的。</p>
<p><strong>思考三：</strong>上面的Dubbo入门案例中我们使用Zookeeper作为服务注册中心，服务提供者需要将自己的服务信息注册到Zookeeper，服务消费者需要从Zookeeper订阅自己所需要的服务，此时Zookeeper服务就变得非常重要了，那如何防止Zookeeper单点故障呢？</p>
<p><strong>答：</strong>Zookeeper其实是支持集群模式的，可以配置Zookeeper集群来达到Zookeeper服务的高可用，防止出现单点故障。</p>
<h3 id="4-3-代码重构"><a href="#4-3-代码重构" class="headerlink" title="4.3 代码重构"></a>4.3 代码重构</h3><p>① 创建项目：dubbodemo_interface</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150754.png" alt="download (7)"></p>
<p>② 把 项目dubbodemo_consumer 和 项目dubbodemo_provider当中的 接口 HelloService 拷贝到dubbodemo_interface工程里面</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150723.png" alt="download (6)"></p>
<p>③ 删除工程dubbodemo_consumer 和 工程dubbodemo_provider当中的 接口 HelloService</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150702.png" alt="download (5)"></p>
<p>consumer 工程和provider添加pom文件的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>④ 运行程序：<a href="http://localhost:8084/demo/hello?name=haha">http://localhost:8084/demo/hello?name=haha</a></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150635.png" alt="download (4)"></p>
<h3 id="4-4-加入log4j日志"><a href="#4-4-加入log4j日志" class="headerlink" title="4.4 加入log4j日志"></a>4.4 加入log4j日志</h3><p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150604.png" alt="download (3)"></p>
<p>运行程序发现<code>dubbo</code>建议大家使用 <code>log4j</code>日志，我们就需要在 <code>resources</code> 文件夹下面引入<code>log4j.properties</code>日志文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### direct log messages to stdout ###</span><br><span class="line">log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target&#x3D;System.err</span><br><span class="line">log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern&#x3D;%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">### direct messages to file mylog.log ###</span><br><span class="line">log4j.appender.file&#x3D;org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.file.File&#x3D;c:\\mylog.log</span><br><span class="line">log4j.appender.file.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern&#x3D;%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">### set log levels - for more verbose logging change &#39;info&#39; to &#39;debug&#39; ###</span><br><span class="line"></span><br><span class="line">log4j.rootLogger&#x3D;debug, stdout</span><br></pre></td></tr></table></figure>

<h2 id="5-Dubbo管理控制台"><a href="#5-Dubbo管理控制台" class="headerlink" title="5. Dubbo管理控制台"></a>5. Dubbo管理控制台</h2><p>我们在开发时，需要知道Zookeeper注册中心都注册了哪些服务，有哪些消费者来消费这些服务。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。</p>
<h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>安装步骤：</p>
<p>（1）将资料中的dubbo-admin-2.6.0.war文件复制到tomcat的webapps目录下</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150542.png" alt="download (2)"></p>
<p>（2）启动tomcat，此war文件会自动解压</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150527.png" alt="download (1)"></p>
<p>（3）修改WEB-INF下的dubbo.properties文件，注意dubbo.registry.address对应的值需要对应当前使用的Zookeeper的ip地址和端口号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;192.168.134.129:2181</span><br><span class="line">dubbo.admin.root.password&#x3D;root</span><br><span class="line">dubbo.admin.guest.password&#x3D;guest</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150511.png" alt="download"></p>
<p>（4）重启tomcat</p>
<h3 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h3><p>操作步骤：</p>
<p>（1）访问<a href="http://localhost:8080/dubbo-admin-2.6.0/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D(root)%E5%92%8C%E5%AF%86%E7%A0%81(root)">http://localhost:8080/dubbo-admin-2.6.0/，输入用户名(root)和密码(root)</a></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150437.png" alt="download (3)"></p>
<p>（2）启动服务提供者工程和服务消费者工程，可以在查看到对应的信息</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150339.png" alt="download"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150353.png" alt="download (1)"></p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150408.png" alt="download (2)"></p>
<h1 id="6-Dubbo相关配置说明"><a href="#6-Dubbo相关配置说明" class="headerlink" title="6.Dubbo相关配置说明"></a>6.Dubbo相关配置说明</h1><h3 id="6-1-包扫描"><a href="#6-1-包扫描" class="headerlink" title="6.1 包扫描"></a>6.1 包扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dubbo:annotation package&#x3D;&quot;com.dubbo.service&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>服务提供者和服务消费者都需要配置，表示包扫描，作用是扫描指定包(包括子包)下的类。</p>
<p>如果不使用包扫描，也可以通过如下配置的方式来发布服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;helloService&quot; class&#x3D;&quot;com.dubbo.service.impl.HelloServiceImpl&quot; &#x2F;&gt;</span><br><span class="line">&lt;dubbo:service interface&#x3D;&quot;com.dubbo.api.HelloService&quot; ref&#x3D;&quot;helloService&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>作为服务消费者，可以通过如下配置来引用服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 生成远程服务代理，可以和本地bean一样使用helloService --&gt;</span><br><span class="line">&lt;dubbo:reference id&#x3D;&quot;helloService&quot; interface&#x3D;&quot;com.dubbo.api.HelloService&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>上面这种方式发布和引用服务，一个配置项(<a href="dubbo:service">dubbo:service</a>、<a href="dubbo:reference">dubbo:reference</a>)只能发布或者引用一个服务，如果有多个服务，这种方式就比较繁琐了。推荐使用包扫描方式。</p>
<h3 id="6-2-协议"><a href="#6-2-协议" class="headerlink" title="6.2 协议"></a>6.2 协议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dubbo:protocol name&#x3D;&quot;dubbo&quot; port&#x3D;&quot;20880&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>一般在服务提供者一方配置，可以指定使用的协议名称和端口号。</p>
<p>其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</p>
<p>推荐使用的是dubbo协议。</p>
<p>dubbo 协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p>
<p>也可以在同一个工程中配置多个协议，不同服务可以使用不同的协议，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;rmi&quot;</span> <span class="attr">port</span>=<span class="string">&quot;1099&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dubbo协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.dubbo.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;dubbo&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用rmi协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.dubbo.api.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;rmi&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="6-3-启动时检查"><a href="#6-3-启动时检查" class="headerlink" title="6.3 启动时检查"></a>6.3 启动时检查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dubbo:consumer check&#x3D;&quot;false&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>上面这个配置需要配置在服务消费者一方，如果不配置默认check值为true。Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题。可以通过将check值改为false来关闭检查。</p>
<p>建议在开发阶段将check值设置为false，在生产环境下改为true。</p>
<h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><p>负载均衡（Load Balance）：其实就是将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。</p>
<p>在集群负载均衡时，Dubbo 提供了多种均衡策略（包括随机、轮询、最少活跃调用数、一致性Hash），缺省为random随机调用。</p>
<p>配置负载均衡策略，既可以在服务提供者一方配置，也可以在服务消费者一方配置，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在服务消费者一方配置负载均衡策略</span></span><br><span class="line">    <span class="meta">@Reference(check = false,loadbalance = &quot;random&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在服务提供者一方配置负载均衡</span></span><br><span class="line"><span class="meta">@Service(loadbalance = &quot;random&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过启动多个服务提供者来观察Dubbo负载均衡效果。</p>
<p>注意：因为我们是在一台机器上启动多个服务提供者，所以需要修改tomcat的端口号和Dubbo服务的端口号来防止端口冲突。</p>
<p>在实际生产环境中，多个服务提供者是分别部署在不同的机器上，所以不存在端口冲突问题。</p>
<h4 id="6-4-1-修改-provider"><a href="#6-4-1-修改-provider" class="headerlink" title="6.4.1 修改 provider"></a>6.4.1 修改 provider</h4><p>① 修改pom文件的端口号，防止端口冲突</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150129.png" alt="download (7)"></p>
<p>② 修改 <code>applicationContext-service.xml</code> 配置文件</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150108.png" alt="download (6)"></p>
<p>③ 为了演示方便，修改打印端口</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119150047.png" alt="download (5)"></p>
<p>④ 运行 <code>provider</code> 提供者两次，分别都修改端口</p>
<p>⑤ 运行消费者 <code>consumer</code></p>
<p>⑥ 请求 <code>http://localhost:8082/demo/hello?name=Jack</code></p>
<h2 id="7-解决Dubbo无法发布被事务代理的Service问题"><a href="#7-解决Dubbo无法发布被事务代理的Service问题" class="headerlink" title="7. 解决Dubbo无法发布被事务代理的Service问题"></a>7. 解决Dubbo无法发布被事务代理的Service问题</h2><p>前面我们已经完成了Dubbo的入门案例，通过入门案例我们可以看到通过Dubbo提供的标签配置就可以进行包扫描，扫描到@Service注解的类就可以被发布为服务。</p>
<p>但是我们如果在服务提供者类上加入@Transactional事务控制注解后，服务就发布不成功了。原因是事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而此代理对象的完整类名为com.sun.proxy.$Proxy42（最后两位数字不是固定的），导致Dubbo在发布服务前进行包匹配时无法完成匹配，进而没有进行服务的发布。</p>
<h3 id="7-1-问题展示"><a href="#7-1-问题展示" class="headerlink" title="7.1 问题展示"></a>7.1 问题展示</h3><p>在入门案例的服务提供者dubbodemo_provider工程基础上进行展示</p>
<p>操作步骤：</p>
<p>（1）在pom.xml文件中增加maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）在applicationContext-service.xml配置文件中加入数据源、事务管理器、开启事务注解的相关配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo_provider&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册  协议和port   端口默认是20880 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20882&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.maweiqi.service.impl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面连接的数据库可以自行创建</p>
<p>（3）在HelloServiceImpl类上加入@Transactional注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maweiqi.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.maweiqi.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;8086 hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）启动服务提供者和服务消费者，并访问</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119145956.png" alt="download (4)"></p>
<p>上面的错误为没有可用的服务提供者</p>
<p>查看dubbo管理控制台发现服务并没有发布，如下：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119145913.png" alt="download (2)"></p>
<p>可以通过断点调试的方式查看Dubbo执行过程，Dubbo通过AnnotationBean的postProcessAfterInitialization方法进行处理</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119145847.png" alt="download (1)"></p>
<h3 id="7-2-解决方案"><a href="#7-2-解决方案" class="headerlink" title="7.2 解决方案"></a>7.2 解决方案</h3><p>通过上面的断点调试可以看到，在HelloServiceImpl类上加入事务注解后，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$Proxy35，导致Dubbo在进行包匹配时没有成功（因为我们在发布服务时扫描的包为com.maweiqi.service），所以后面真正发布服务的代码没有执行。</p>
<p>解决方式操作步骤：</p>
<p>（1）修改applicationContext-service.xml配置文件，开启事务控制注解支持时指定proxy-target-class属性，值为true。其作用是使用cglib代理方式为Service类创建代理对象,添加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）修改HelloServiceImpl类，在Service注解中加入interfaceClass属性，值为HelloService.class，作用是指定服务的接口类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maweiqi.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.maweiqi.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(interfaceClass = HelloService.class)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;8086 hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处也是必须要修改的，否则会导致发布的服务接口为SpringProxy，而不是HelloService接口，如下：</p>
<p><img src="https://gitee.com/ilusymon/images4md/raw/master/img4md/20201119145806.png" alt="20201119145806"></p>
]]></content>
  </entry>
</search>
